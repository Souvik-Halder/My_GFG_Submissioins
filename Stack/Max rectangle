class Solution {
    public int maxArea(int M[][], int n, int m) {
        
        
       int[] arr1 = new int[m];
        for(int i = 0;i<m;i++){
            
            arr1[i] = M[0][i];
           
        }
       int max = histo(arr1 );
     //  int[] arr2 = new int[m];
        for(int i = 1;i<n;i++){
            
            for(int j = 0;j<m;j++){
                
                if(M[i][j]  == 0){
                    arr1[j] = 0; 
                }
                else{
                    arr1[j] = arr1[j] + M[i][j];
                }
            }
          max = Math.max(max, histo(arr1));
        }
           return max;
    }
    public  int histo(int[] arr ){
        Stack<Integer> st = new Stack<>();
            int[] A = new int[arr.length];
             for(int i = arr.length-1 ;i>=0;i--) {
                 
                
                 while(!st.isEmpty() && arr[st.peek()] >= arr[i]  ) {
                     st.pop();
                 }
                 
                 if(st.isEmpty()) {
                     A[i] = arr.length;
                 }
                 else {
                    A[i] =  st.peek(); 
                 }
                 st.push(i);
             }
        //    System.out.println(Arrays.toString(A));
            
            st.clear();
            int[] B = new int[arr.length];
              for(int i = 0 ;i<arr.length;i++) {
                 
                 
                 while(!st.isEmpty() && arr[st.peek()] >= arr[i]  ) {
                     st.pop();
                 }
                 
                 if(st.isEmpty()) {
                     B[i] = -1;
                 }
                 else {
                    B[i] =  st.peek(); 
                 }
                 st.push(i);
             }
          //    System.out.println(Arrays.toString(B));
              
              int[] C = new int[arr.length];
              
              for(int j = 0;j<arr.length;j++ ) {
                        C[j] = A[j] - B[j]-1;
              }
        //      System.out.println(Arrays.toString(C));
              
              int[] D = new int[arr.length];
              for(int k = 0;k<arr.length;k++) {
                  D[k] = (int)arr[k] * (int)C[k];
              }
           //   System.out.println(Arrays.toString(D));
              int ele = 0;
              for(int i = 0;i<D.length;i++) {
                  
                  if(ele < D[i]) {
                      ele = D[i];
                  }
              }
            //  System.out.println(ele);
            return ele;
        }
    }
