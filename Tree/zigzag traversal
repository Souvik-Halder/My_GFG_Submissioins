ArrayList<Integer> zigZagTraversal(Node root)
    {
        ArrayList<Integer> res = new ArrayList<>();
        boolean ltr = true;
        Queue<Node> q = new LinkedList<>();
        
        if(root == null) return res;
        q.add(root);
        
        while(!q.isEmpty()){
            List<Node> children = new ArrayList<>();
            int size = q.size();
            for(int i=0; i<size; i++){
                Node cur = q.remove();
                
                if(cur != null) {
                    res.add(cur.data);
                    
                    if(ltr){
                        children.add(cur.left);
                        children.add(cur.right);
                    }    
                    else{
                        children.add(cur.right);
                        children.add(cur.left);
                    }
                }
            }
            
            // change direction
            ltr = !ltr;
            
            // copy children to queue always in reverse order
            for(int i=children.size()-1; i>=0; i--){
                q.add( children.get(i) );
            }
        }
        
        return res;
    }
